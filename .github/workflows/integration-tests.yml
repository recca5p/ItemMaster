name: Integration Tests

on:
  pull_request:
    branches:
      - master
  workflow_dispatch: {}

permissions:
  contents: read

env:
  AWS_REGION: ap-southeast-1
  LAMBDA_FUNCTION_NAME: im-dev-lambda-item-master
  MYSQL_SECRET_ID: ${{ secrets.RDS_SECRET_ID }}
  ITEMMASTER_TEST_MODE: "true"
  SQS_QUEUE_URL: http://localhost:4566/000000000000/itemmaster-test-queue

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: item_master
          MYSQL_USER: im_user
          MYSQL_PASSWORD: im_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: sqs,secretsmanager
          DEBUG: 1
          DOCKER_HOST: unix:///var/run/docker.sock
        ports:
          - 4566:4566
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
      
      - name: Configure AWS credentials for LocalStack
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: test
          aws-secret-access-key: test
          aws-region: ${{ env.AWS_REGION }}
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
      
      - name: Create SQS queue
        run: |
          aws sqs create-queue \
            --queue-name im-dev-item-master-queue \
            --endpoint-url http://localhost:4566 \
            --region $AWS_REGION
      
      - name: Create secrets in LocalStack
        run: |
          aws secretsmanager create-secret \
            --name $MYSQL_SECRET_ID \
            --secret-string '{"username":"im_user","password":"im_pass","host":"mysql","port":3306,"database":"item_master"}' \
            --endpoint-url http://localhost:4566 \
            --region $AWS_REGION
      
      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build integration tests
        run: dotnet build ItemMaster.Lambda/test/ItemMaster.Integration.Tests/ItemMaster.Integration.Tests.csproj --configuration Release
      
      - name: Install EF Core tools
        run: dotnet tool install --global dotnet-ef --version 8.0.0
      
      - name: Install MySQL client
        run: sudo apt-get update && sudo apt-get install -y mysql-client
      
      - name: Apply database migrations
        run: |
          cd ItemMaster.Lambda/src/ItemMaster.Infrastructure
          dotnet ef database update \
            --startup-project ../ItemMaster.Lambda \
            --connection "Server=localhost;Database=item_master;User=im_user;Password=im_pass;"
      
      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..60}; do
            if mysql -h 127.0.0.1 -P 3306 -u im_user -pim_pass item_master -e "SELECT 1" 2>/dev/null; then
              echo "MySQL is ready on attempt $i"
              mysql -h 127.0.0.1 -P 3306 -u im_user -pim_pass -e "SHOW TABLES;" item_master
              break
            fi
            echo "Waiting for MySQL... ($i/60)"
            sleep 2
          done
          
          # Final check
          if ! mysql -h 127.0.0.1 -P 3306 -u im_user -pim_pass item_master -e "SELECT 1" 2>/dev/null; then
            echo "ERROR: MySQL failed to become ready after 120 seconds"
            exit 1
          fi
      
      - name: Wait for LocalStack to be ready
        run: |
          echo "Waiting for LocalStack to be ready..."
          for i in {1..60}; do
            if curl -f http://localhost:4566/_localstack/health 2>/dev/null; then
              echo "LocalStack is ready"
              break
            fi
            echo "Waiting for LocalStack... ($i/60)"
            sleep 2
          done
      
      - name: Run integration tests
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_REGION: ap-southeast-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          ITEMMASTER_TEST_MODE: "true"
          SQS_URL: http://localhost:4566/000000000000/itemmaster-test-queue
          sqs__url: http://localhost:4566/000000000000/itemmaster-test-queue
          snowflake__database: XB_DEV_DB
          snowflake__schema: ITEM_PETAL_US
          snowflake__table: ITEM_PETAL_US
          snowflake__warehouse: COMPUTE_WH
          MYSQL_HOST: localhost
          MYSQL_DATABASE: item_master
          MYSQL_USER: im_user
          MYSQL_PASSWORD: im_pass
        run: |
          dotnet test ItemMaster.Lambda/test/ItemMaster.Integration.Tests/ItemMaster.Integration.Tests.csproj \
            --configuration Release \
            --no-build \
            --logger "trx;LogFileName=integration-results.trx" \
            --filter Category=Integration
      
      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: integration-results.trx
          retention-days: 30
      
      - name: Generate summary
        if: always()
        run: |
          echo "## Integration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Integration tests completed" >> $GITHUB_STEP_SUMMARY
          echo "Test results uploaded as artifacts" >> $GITHUB_STEP_SUMMARY
