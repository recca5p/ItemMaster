name: Build & Test

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch: {}

permissions:
  contents: read

env:
  AWS_REGION: ap-southeast-1
  LAMBDA_FUNCTION_NAME: im-dev-lambda-item-master
  PROJECT_PATH: ItemMaster.Lambda
  OUTPUT_DIR: out
  COVERAGE_THRESHOLD: 80

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests with coverage
        run: |
          dotnet test --configuration Release \
            --logger "trx;LogFileName=test-results.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --settings coverage.runsettings \
            --filter "Category!=Integration" \
            --verbosity normal

      - name: Find coverage XML files
        if: always()
        run: |
          echo "Looking for coverage files..."
          if [ -d ./coverage ]; then
            echo "Contents of ./coverage:"
            ls -lah ./coverage/
            echo ""
            echo "Coverage reports:"
            find ./coverage -name "*.cobertura.xml" -type f
            echo ""
            echo "All files in coverage directory:"
            find ./coverage -type f
          else
            echo "ERROR: ./coverage directory not found"
          fi

      - name: Install ReportGenerator
        if: always()
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate HTML coverage report and merge
        if: always()
        run: |
          REPORT_OUTPUT="./coverage-html"
          find ./coverage -name "*.cobertura.xml" -type f

          reportgenerator \
            -reports:"./coverage/*/coverage.cobertura.xml" \
            -targetdir:"${REPORT_OUTPUT}" \
            -reporttypes:"Html;Badges;JsonSummary;Cobertura" \
            -classfilters:"-Microsoft.*;-System.*;-xunit.*" \
            -verbosity:Warning
          echo "Coverage HTML report generated in ${REPORT_OUTPUT}"

      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-and-coverage
          path: |
            test-results.trx
            coverage/
            coverage-html/
            coverage-html/Cobertura.xml
          retention-days: 30

      - name: Publish Lambda package (linux-arm64)
        run: |
          dotnet publish -c Release -r linux-arm64 --self-contained false -o $OUTPUT_DIR ./ItemMaster.Lambda/src/ItemMaster.Lambda
          cd $OUTPUT_DIR && zip -r ../function.zip . && cd -

      - name: Upload Lambda package
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: function.zip

      - name: Check coverage threshold and test results
        if: always()
        run: |
          MERGED_XML=$(find ./coverage-html -name "Cobertura.xml" -type f | head -1)
          if [ -z "$MERGED_XML" ] || [ ! -f "$MERGED_XML" ]; then
            echo "ERROR: Coverage XML not found"
            exit 1
          fi

          LINE_RATE=$(grep -o 'line-rate="[0-9.]*"' "$MERGED_XML" | grep -o '[0-9.]*' | head -1 || echo "0")
          PERCENTAGE=$(awk "BEGIN {printf \"%.1f\", $LINE_RATE * 100}")

          if [ -f test-results.trx ]; then
            FAILED_COUNT=$(grep -o 'testOutcome="Failed"' test-results.trx | wc -l || echo "0")
            if [ "$FAILED_COUNT" -gt 0 ]; then
              echo "ERROR: $FAILED_COUNT test(s) failed"
              exit 1
            fi
          fi

          if (( $(echo "$PERCENTAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "ERROR: Coverage $PERCENTAGE% is below threshold $COVERAGE_THRESHOLD%"
            exit 1
          fi

          echo "Coverage: $PERCENTAGE% (threshold: $COVERAGE_THRESHOLD%)"

      - name: Parse test results
        if: always()
        id: test-results
        run: |
          if [ -f test-results.trx ]; then
            PASSED=$(grep -o 'testOutcome="Passed"' test-results.trx | wc -l || echo "0")
            FAILED=$(grep -o 'testOutcome="Failed"' test-results.trx | wc -l || echo "0")
            TOTAL=$((PASSED + FAILED))
            
            echo "passed=$PASSED" >> $GITHUB_OUTPUT
            echo "failed=$FAILED" >> $GITHUB_OUTPUT
            echo "total=$TOTAL" >> $GITHUB_OUTPUT
            
            echo "Tests - Passed: $PASSED, Failed: $FAILED, Total: $TOTAL"
          else
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
            echo "total=0" >> $GITHUB_OUTPUT
          fi

      - name: Generate summary
        if: always()
        run: |
          MERGED_XML=$(find ./coverage-html -name "Cobertura.xml" -type f | head -1)
          PERCENTAGE="N/A"
          if [ -n "$MERGED_XML" ] && [ -f "$MERGED_XML" ]; then
            LINE_RATE=$(grep -o 'line-rate="[0-9.]*"' "$MERGED_XML" | grep -o '[0-9.]*' | head -1 || echo "0")
            PERCENTAGE=$(awk "BEGIN {printf \"%.1f\", $LINE_RATE * 100}")
          fi

          echo "## Build & Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Coverage**: $PERCENTAGE%" >> $GITHUB_STEP_SUMMARY
          echo "**Tests Passed**: ${{ steps.test-results.outputs.passed }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tests Failed**: ${{ steps.test-results.outputs.failed }}" >> $GITHUB_STEP_SUMMARY

  pr-comment:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: test-results-and-coverage
          path: ./test-results

      - name: Generate coverage summary
        id: coverage
        run: |
          # Look for merged coverage XML first
          MERGED_XML=$(find ./test-results -name "Cobertura.xml" -type f | head -1)

          if [ -n "$MERGED_XML" ] && [ -f "$MERGED_XML" ]; then
            echo "Using merged coverage XML: $MERGED_XML"
            COVERAGE_XML="$MERGED_XML"
          else
            COVERAGE_XML=$(find ./test-results -name "*.cobertura.xml" -type f | head -1)
            echo "Using individual coverage XML: $COVERAGE_XML"
          fi

          if [ -n "$COVERAGE_XML" ] && [ -f "$COVERAGE_XML" ]; then
            LINE_RATE=$(grep -o 'line-rate="[0-9.]*"' "$COVERAGE_XML" | grep -o '[0-9.]*' | head -1 || echo "0")
            PERCENTAGE=$(awk "BEGIN {printf \"%.1f\", $LINE_RATE * 100}")
            
            echo "coverage=$PERCENTAGE" >> $GITHUB_OUTPUT
            echo "Coverage: $PERCENTAGE%"
          else
            echo "coverage=N/A" >> $GITHUB_OUTPUT
            echo "Coverage report not found"
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = '${{ steps.coverage.outputs.coverage }}';
            const coverageValue = parseFloat(coverage);
            const isNumeric = !isNaN(coverageValue);
            const coverageBadge = !isNumeric ? '' : coverageValue >= 90 ? '[90%+]' : coverageValue >= 75 ? '[75-89%]' : coverageValue >= 50 ? '[50-74%]' : '[<50%]';

            const message = `## Build & Test Successful

            The Lambda package has been built and tested successfully for this PR.

            ${coverageBadge} **Code Coverage**: ${isNumeric ? coverage + '%' : coverage}

            Coverage reports are available in the workflow artifacts.

            **Note**: Integration tests and deployment are required to pass before merging.
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
